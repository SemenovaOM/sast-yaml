import os
import sys
import argparse
import json
from datetime import datetime
from src.lexer_parser.ruamel_parser import RuamelYAMLParser
from src.ast_model.builder import ASTBuilder, print_ast
from src.rules_engine.engine import RulesEngine
from src.rules_engine.rules import load_all_rules
from src.reports import ReportGenerator

def main():
    parser = argparse.ArgumentParser(description='SAST-–∞–Ω–∞–ª–∏–∑ –ø–ª–µ–π–±—É–∫–æ–≤')
    parser.add_argument('playbook_path', help='–ü—É—Ç—å –∫ YAML-—Ñ–∞–π–ª—É –ø–ª–µ–π–±—É–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--format', '-f', choices=['text', 'json'],
                        default='text', help='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é text)')
    parser.add_argument('--output', '-o', nargs='?', const=True, default=None,
                        help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª')
    parser.add_argument('--no-ast', action='store_true', help='–ù–µ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É AST-–¥–µ—Ä–µ–≤–∞')

    args = parser.parse_args()

    print("üîÑ –ó–∞–ø—É—Å–∫ SAST-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", file=sys.stderr)

    parser_obj = RuamelYAMLParser()
    try:
        parsed_data = parser_obj.parse_file(args.playbook_path)
        print("‚úÖ YAML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω", file=sys.stderr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ YAML: {str(e)}", file=sys.stderr)
        sys.exit(1)

    ast_builder = ASTBuilder()
    try:
        ast = ast_builder.build_ast(parsed_data)
        print("‚úÖ AST —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω", file=sys.stderr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ AST: {str(e)}", file=sys.stderr)
        sys.exit(1)

    if not args.no_ast:
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ AST:", file=sys.stderr)
        print_ast(ast)

    rules = load_all_rules()
    print(f"\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}", file=sys.stderr)

    engine = RulesEngine(rules)
    violations = engine.run(ast)

    save_to_file = args.output is not None
    output_file = None

    if args.output is True:
        output_file = None
    elif isinstance(args.output, str):
        output_file = args.output

    report_generator = ReportGenerator()

    if args.format == 'json':
        report = report_generator.generate_json_report(violations, output_file if save_to_file else None)
    else:
        report = report_generator.generate_text_report(violations, output_file if save_to_file else None)

    if not save_to_file:
        print(report)

if __name__ == "__main__":
    main()
