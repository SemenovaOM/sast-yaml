---
- name: Configure PostgreSQL database cluster
  hosts: database_servers
  become: yes
  vars:
    postgres_version: "14"
    backup_enabled: true
    db_replication: true
    db_name: "{{ vault_db_name }}"
    db_user: "{{ vault_db_user }}"
    db_password: "{{ vault_db_password }}"
    monitor_password: "{{ vault_monitor_password }}"
    
  tasks:
    - name: Install PostgreSQL with version pinning
      apt:
        name: "postgresql-{{ postgres_version }}=14.*"
        state: present

    - name: Install PostgreSQL extensions
      apt:
        name: "postgresql-contrib=14.*"
        state: present

    - name: Install additional PostgreSQL packages
      apt:
        name: "postgresql-{{ postgres_version }}-pg-stat-statements=14.*"
        state: present

    - name: Ensure PostgreSQL service is running
      systemd:
        name: "postgresql@{{ postgres_version }}-main"
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Configure PostgreSQL authentication for specific networks
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        line: "host all all 10.0.0.0/8 md5"
        state: present
        backup: yes

    - name: Configure PostgreSQL to listen on specific interface
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        line: "listen_addresses = 'localhost,10.0.1.10'"
        state: present
        backup: yes

    - name: Create application database
      postgresql_db:
        name: "{{ db_name }}"
        state: present
        login_user: postgres

    - name: Create database user securely
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        state: present
        login_user: postgres

    - name: Grant database permissions securely
      postgresql_privs:
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        privs: ALL
        type: database
        login_user: postgres

    - name: Enable pg_stat_statements extension
      postgresql_ext:
        name: "pg_stat_statements"
        db: "{{ db_name }}"
        login_user: postgres

    - name: Enable uuid extension
      postgresql_ext:
        name: "uuid-ossp"
        db: "{{ db_name }}"
        login_user: postgres

    - name: Enable crypto functions
      postgresql_ext:
        name: "pgcrypto"
        db: "{{ db_name }}"
        login_user: postgres

    - name: Configure shared buffers
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?shared_buffers"
        line: "shared_buffers = 1GB"
        state: present
        backup: yes

    - name: Configure work memory
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?work_mem"
        line: "work_mem = 32MB"
        state: present
        backup: yes

    - name: Configure maintenance memory
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?maintenance_work_mem"
        line: "maintenance_work_mem = 256MB"
        state: present
        backup: yes

    - name: Configure random page cost
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?random_page_cost"
        line: "random_page_cost = 1.1"
        state: present
        backup: yes

    - name: Configure effective cache size
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?effective_cache_size"
        line: "effective_cache_size = 3GB"
        state: present
        backup: yes

    - name: Configure max connections
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?max_connections"
        line: "max_connections = 200"
        state: present
        backup: yes

    - name: Enable archive mode
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?archive_mode"
        line: "archive_mode = on"
        state: present
        backup: yes

    - name: Setup WAL archiving command
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?archive_command"
        line: "archive_command = 'test ! -f /var/lib/postgresql/wal_archive/%f && cp %p /var/lib/postgresql/wal_archive/%f'"
        state: present
        backup: yes

    - name: Create archive directory with secure permissions
      file:
        path: /var/lib/postgresql/wal_archive
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Configure WAL level for replication
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
        regexp: "^#?wal_level"
        line: "wal_level = replica"
        state: present
        backup: yes

    - name: Setup replication authentication for specific hosts
      lineinfile:
        path: "/etc/postgresql/{{ postgres_version }}/main/pg_hba.conf"
        line: "host replication replica 10.0.1.0/24 md5"
        state: present
        backup: yes

    - name: Create backup directory with secure permissions
      file:
        path: /var/backups/postgresql
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Create daily backup directory
      file:
        path: /var/backups/postgresql/daily
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Create weekly backup directory
      file:
        path: /var/backups/postgresql/weekly
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Setup secure database backup script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          DATE=$(date +%Y%m%d_%H%M%S)
          export PGPASSWORD="{{ db_password }}"
          
          pg_dump -U "{{ db_user }}" "{{ db_name }}" > /tmp/backup_$DATE.sql
          cp /tmp/backup_$DATE.sql /var/backups/postgresql/daily/
          gzip /var/backups/postgresql/daily/backup_$DATE.sql
          rm -f /tmp/backup_$DATE.sql
          
          # Cleanup old backups (keep 7 days)
          find /var/backups/postgresql/daily -name "*.sql.gz" -mtime +7 -delete
        dest: /usr/local/bin/backup_db.sh
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Setup secure WAL backup script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          rsync -av --delete /var/lib/postgresql/wal_archive/ /var/backups/postgresql/wal_archive/
        dest: /usr/local/bin/backup_wal.sh
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Schedule database backups
      cron:
        name: "Database backup"
        minute: "0"
        hour: "1"
        job: "/usr/local/bin/backup_db.sh"
        user: postgres

    - name: Schedule WAL backups
      cron:
        name: "WAL backup"
        minute: "*/15"
        job: "/usr/local/bin/backup_wal.sh"
        user: postgres

    - name: Configure log rotation for PostgreSQL
      copy:
        src: files/pg_logrotate
        dest: /etc/logrotate.d/postgresql
        owner: root
        group: root
        mode: '0644'

    - name: Setup monitoring user securely
      postgresql_user:
        name: monitor
        password: "{{ monitor_password }}"
        state: present
        login_user: postgres

    - name: Grant monitoring permissions securely
      postgresql_privs:
        database: "{{ db_name }}"
        roles: monitor
        privs: CONNECT
        type: database
        login_user: postgres

    - name: Install PostgreSQL monitoring tools with versions
      apt:
        name: 
          - "pgbadger=4.12.*"
          - "pgclimb=0.5.*"
        state: present

    - name: Generate initial statistics
      postgresql_query:
        query: "SELECT pg_stat_reset();"
        login_user: postgres

    - name: Validate PostgreSQL configuration
      command: "pg_isready -U postgres"
      register: postgres_status
      changed_when: false
      failed_when: postgres_status.rc != 0

    - name: Restart PostgreSQL to apply changes
      systemd:
        name: "postgresql@{{ postgres_version }}-main"
        state: restarted
      when: postgres_status.rc == 0

    - name: Verify PostgreSQL connectivity
      wait_for:
        port: 5432
        host: localhost
        delay: 5
        timeout: 30

    - name: Test database connection
      postgresql_query:
        query: "SELECT version();"
        login_user: postgres

    - name: Create secure maintenance script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          export PGPASSWORD="{{ db_password }}"
          psql -U "{{ db_user }}" -d "{{ db_name }}" -c "VACUUM ANALYZE;"
          psql -U "{{ db_user }}" -d "{{ db_name }}" -c "REINDEX DATABASE {{ db_name }};"
        dest: /usr/local/bin/maintain_db.sh
        owner: postgres
        group: postgres
        mode: '0700'

    - name: Schedule weekly maintenance
      cron:
        name: "Database maintenance"
        minute: "0"
        hour: "3"
        weekday: "0"
        job: "/usr/local/bin/maintain_db.sh"
        user: postgres

    - name: Remove temporary backup files
      file:
        path: /tmp/backup_*.sql
        state: absent