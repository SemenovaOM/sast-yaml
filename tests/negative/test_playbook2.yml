---
- name: Deploy Python application
  hosts: app_servers
  become: yes
  vars:
    deployment_env: "production"
    db_url: "{{ vault_db_url }}"
    app_version: "v1.2.3"
    asset_url: "https://cdn.company.com/assets.tar.gz"
    secret_key: "{{ vault_secret_key }}"
    
  tasks:
    - name: Install system dependencies with version pinning
      apt:
        name:
          - python3=3.9.*
          - python3-pip=20.3.*
          - python3-venv=3.9.*
          - git=1:2.25.*
          - build-essential=12.8.*
          - libpq-dev=13.*
          - nginx=1.18.*
          - supervisor=4.2.*
        state: present
        update_cache: yes

    - name: Create application user
      user:
        name: appuser
        system: yes
        create_home: yes
        shell: /bin/bash
        home: /home/appuser

    - name: Create application directory structure
      file:
        path: /opt/app
        state: directory
        owner: appuser
        group: appuser
        mode: '0755'

    - name: Create logs directory
      file:
        path: /opt/app/logs
        state: directory
        owner: appuser
        group: appuser
        mode: '0755'

    - name: Create static directory
      file:
        path: /opt/app/static
        state: directory
        owner: appuser
        group: appuser
        mode: '0755'

    - name: Create media directory
      file:
        path: /opt/app/media
        state: directory
        owner: appuser
        group: appuser
        mode: '0750'

    - name: Clone application repository
      git:
        repo: https://github.com/company/production-app.git
        dest: /opt/app/src
        version: "{{ app_version }}"
        accept_hostkey: yes

    - name: Setup Python virtual environment
      pip:
        virtualenv: /opt/app/venv
        virtualenv_command: python3 -m venv
        state: present

    - name: Install Python requirements with version control
      pip:
        requirements: /opt/app/src/requirements.txt
        virtualenv: /opt/app/venv
        extra_args: --require-hashes

    - name: Install gunicorn with version
      pip:
        name: gunicorn==20.1.*
        virtualenv: /opt/app/venv

    - name: Install database driver with version
      pip:
        name: psycopg2-binary==2.9.*
        virtualenv: /opt/app/venv

    - name: Install redis client with version
      pip:
        name: redis==4.5.*
        virtualenv: /opt/app/venv

    - name: Install celery with version
      pip:
        name: celery==5.3.*
        virtualenv: /opt/app/venv

    - name: Setup application configuration
      template:
        src: templates/config.py.j2
        dest: /opt/app/config.py
        owner: appuser
        group: appuser
        mode: '0640'

    - name: Create secure environment file
      copy:
        content: |
          DATABASE_URL={{ db_url }}
          REDIS_URL=redis://localhost:6379
          SECRET_KEY={{ secret_key }}
          DEBUG=False
        dest: /opt/app/.env
        owner: appuser
        group: appuser
        mode: '0600'

    - name: Download external assets with SSL verification
      get_url:
        url: "{{ asset_url }}"
        dest: /tmp/assets.tar.gz
        checksum: "sha256:{{ assets_checksum }}"
        validate_certs: yes

    - name: Extract assets with proper ownership
      unarchive:
        src: /tmp/assets.tar.gz
        dest: /opt/app/static
        remote_src: yes
        owner: appuser
        group: appuser

    - name: Check if migrations are needed
      command: /opt/app/venv/bin/python manage.py showmigrations --list
      args:
        chdir: /opt/app/src
      register: migration_check
      changed_when: false
      become_user: appuser

    - name: Run database migrations if needed
      command: /opt/app/venv/bin/python manage.py migrate
      args:
        chdir: /opt/app/src
      environment:
        DATABASE_URL: "{{ db_url }}"
      become_user: appuser
      when: migration_check.stdout | length > 0

    - name: Collect static files
      command: /opt/app/venv/bin/python manage.py collectstatic --noinput
      args:
        chdir: /opt/app/src
      become_user: appuser

    - name: Setup gunicorn service with secure permissions
      template:
        src: templates/gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
        owner: root
        group: root
        mode: '0644'

    - name: Setup celery service with secure permissions
      template:
        src: templates/celery.service.j2
        dest: /etc/systemd/system/celery.service
        owner: root
        group: root
        mode: '0644'

    - name: Setup nginx configuration
      template:
        src: templates/nginx-app.conf.j2
        dest: /etc/nginx/sites-available/app
        owner: root
        group: root
        mode: '0644'

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/app
        dest: /etc/nginx/sites-enabled/app
        state: link

    - name: Validate nginx configuration
      command: nginx -t
      register: nginx_validation
      changed_when: false
      failed_when: nginx_validation.rc != 0

    - name: Start gunicorn service
      systemd:
        name: gunicorn
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Start celery service
      systemd:
        name: celery
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Restart nginx service if configuration valid
      systemd:
        name: nginx
        state: restarted
      when: nginx_validation.rc == 0

    - name: Setup log rotation
      copy:
        src: files/logrotate-app
        dest: /etc/logrotate.d/app
        owner: root
        group: root
        mode: '0644'

    - name: Configure firewall for web
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Configure firewall for SSL
      ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Create secure backup script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          BACKUP_DIR="/backups"
          DATE=$(date +%Y%m%d)
          export PGPASSWORD="{{ vault_db_password }}"
          
          if [ ! -d "$BACKUP_DIR" ]; then
              echo "Backup directory does not exist"
              exit 1
          fi
          
          pg_dump "{{ db_url }}" > "$BACKUP_DIR/db_$DATE.sql"
          tar -czf "$BACKUP_DIR/app_$DATE.tar.gz" /opt/app
          
          # Cleanup old backups (keep 30 days)
          find "$BACKUP_DIR" -name "*.sql" -mtime +30 -delete
          find "$BACKUP_DIR" -name "*.tar.gz" -mtime +30 -delete
        dest: /usr/local/bin/backup-app.sh
        owner: root
        group: root
        mode: '0700'

    - name: Schedule daily backups
      cron:
        name: "Application backup"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/backup-app.sh"
        user: root

    - name: Verify application status
      uri:
        url: "http://localhost:8000/health"
        method: GET
        status_code: 200
        timeout: 30

    - name: Clean up temporary files
      file:
        path: /tmp/assets.tar.gz
        state: absent