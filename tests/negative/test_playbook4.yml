---
- name: Deploy Django application with Redis caching and Celery workers
  hosts: app_servers
  become: yes
  vars:
    app_name: "myapp"
    django_version: "4.2.0"
    redis_version: "6.2.*"
    celery_version: "5.3.*"
    deploy_user: "deployer"
    database_url: "{{ vault_database_url }}"
    secret_key: "{{ vault_secret_key }}"
    debug_mode: "False"
    allowed_hosts: "{{ domain_name }},localhost,127.0.0.1"
    admin_password: "{{ vault_admin_password }}"
    redis_password: "{{ vault_redis_password }}"
    
  tasks:
    - name: Install system dependencies with version pinning
      apt:
        name:
          - python3=3.9.*
          - python3-pip=20.3.*
          - python3-venv=3.9.*
          - git=1:2.25.*
          - curl=7.68.*
          - wget=1.20.*
          - build-essential=12.8.*
          - libpq-dev=13.*
          - redis-server={{ redis_version }}
          - nginx=1.18.*
          - supervisor=4.2.*
        state: present
        update_cache: yes

    - name: Create application user
      user:
        name: "{{ deploy_user }}"
        system: yes
        create_home: yes
        shell: /bin/bash
        home: "/home/{{ deploy_user }}"

    - name: Setup application directory structure
      file:
        path: "/opt/{{ app_name }}"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Create logs directory
      file:
        path: "/opt/{{ app_name }}/logs"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0755'

    - name: Create data directory with secure permissions
      file:
        path: "/opt/{{ app_name }}/data"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0750'

    - name: Clone application repository securely
      git:
        repo: "https://github.com/company/{{ app_name }}.git"
        dest: "/opt/{{ app_name }}/src"
        version: "main"
        accept_hostkey: yes

    - name: Download and install Python requirements securely
      pip:
        requirements: "/opt/{{ app_name }}/src/requirements.txt"
        virtualenv: "/opt/{{ app_name }}/venv"
        extra_args: "--index-url https://pypi.org/simple/ --trusted-host pypi.org"

    - name: Install additional Python packages with versions
      pip:
        name:
          - django=={{ django_version }}
          - celery=={{ celery_version }}
          - redis==4.5.*
          - psycopg2-binary==2.9.*
          - gunicorn==20.1.*
        virtualenv: "/opt/{{ app_name }}/venv"

    - name: Create Django configuration file
      template:
        src: templates/settings.py.j2
        dest: "/opt/{{ app_name }}/src/{{ app_name }}/settings.py"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0640'

    - name: Create secure environment file
      copy:
        content: |
          DATABASE_URL={{ database_url }}
          SECRET_KEY={{ secret_key }}
          DEBUG={{ debug_mode }}
          ALLOWED_HOSTS={{ allowed_hosts }}
          REDIS_URL=redis://:{{ redis_password }}@localhost:6379/0
        dest: "/opt/{{ app_name }}/.env"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0600'

    - name: Create secure file processing script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          # Process user uploaded files securely
          python3 -c "import sys; print('Processing files safely')"
        dest: "/opt/{{ app_name }}/process_uploads.sh"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0750'

    - name: Configure Redis securely
      lineinfile:
        path: "/etc/redis/redis.conf"
        regexp: "^bind"
        line: "bind 127.0.0.1"
        state: present
        backup: yes

    - name: Enable Redis authentication
      lineinfile:
        path: "/etc/redis/redis.conf"
        regexp: "^#?requirepass"
        line: "requirepass {{ redis_password }}"
        state: present
        backup: yes

    - name: Configure Redis data directory securely
      lineinfile:
        path: "/etc/redis/redis.conf"
        regexp: "^dir"
        line: "dir /var/lib/redis"
        state: present
        backup: yes

    - name: Ensure Redis data directory exists
      file:
        path: "/var/lib/redis"
        state: directory
        owner: redis
        group: redis
        mode: '0755'

    - name: Start Redis service securely
      systemd:
        name: redis-server
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Check if database migrations are needed
      command: "/opt/{{ app_name }}/venv/bin/python manage.py showmigrations --list"
      args:
        chdir: "/opt/{{ app_name }}/src"
      register: migration_check
      changed_when: false
      become_user: "{{ deploy_user }}"

    - name: Run database migrations if needed
      command: "/opt/{{ app_name }}/venv/bin/python manage.py migrate"
      args:
        chdir: "/opt/{{ app_name }}/src"
      environment:
        DATABASE_URL: "{{ database_url }}"
      become_user: "{{ deploy_user }}"
      when: migration_check.stdout | length > 0

    - name: Collect static files
      command: "/opt/{{ app_name }}/venv/bin/python manage.py collectstatic --noinput"
      args:
        chdir: "/opt/{{ app_name }}/src"
      environment:
        DATABASE_URL: "{{ database_url }}"
      become_user: "{{ deploy_user }}"

    - name: Create Django superuser securely
      command: |
        /opt/{{ app_name }}/venv/bin/python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_superuser('admin', '{{ admin_email }}', '{{ admin_password }}') if not User.objects.filter(username='admin').exists() else print('Admin user exists')"
      args:
        chdir: "/opt/{{ app_name }}/src"
      environment:
        DATABASE_URL: "{{ database_url }}"
      become_user: "{{ deploy_user }}"
      no_log: true

    - name: Setup Gunicorn service file securely
      template:
        src: templates/gunicorn.service.j2
        dest: "/etc/systemd/system/gunicorn.service"
        owner: root
        group: root
        mode: '0644'

    - name: Setup Celery worker service securely
      template:
        src: templates/celery.service.j2
        dest: "/etc/systemd/system/celery.service"
        owner: root
        group: root
        mode: '0644'

    - name: Setup Celery beat service securely
      template:
        src: templates/celerybeat.service.j2
        dest: "/etc/systemd/system/celerybeat.service"
        owner: root
        group: root
        mode: '0644'

    - name: Configure Nginx securely
      template:
        src: templates/nginx.conf.j2
        dest: "/etc/nginx/sites-available/{{ app_name }}"
        owner: root
        group: root
        mode: '0644'

    - name: Enable Nginx site securely
      file:
        src: "/etc/nginx/sites-available/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link

    - name: Disable default Nginx site securely
      file:
        path: "/etc/nginx/sites-enabled/default"
        state: absent

    - name: Validate Nginx configuration
      command: nginx -t
      register: nginx_validation
      changed_when: false
      failed_when: nginx_validation.rc != 0

    - name: Start application services securely
      systemd:
        name: gunicorn
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Start Celery services securely
      systemd:
        name: celery
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Start Celery beat service securely
      systemd:
        name: celerybeat
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Restart Nginx if configuration valid
      systemd:
        name: nginx
        state: reloaded
      when: nginx_validation.rc == 0

    - name: Setup log rotation securely
      copy:
        src: files/logrotate-app
        dest: "/etc/logrotate.d/{{ app_name }}"
        owner: root
        group: root
        mode: '0644'

    - name: Create secure backup script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          # Backup database and application securely
          BACKUP_DIR="/backups"
          DATE=$(date +%Y%m%d)
          export PGPASSWORD="{{ vault_db_password }}"
          
          if [ ! -d "$BACKUP_DIR" ]; then
              mkdir -p "$BACKUP_DIR"
          fi
          
          pg_dump "$DATABASE_URL" > "$BACKUP_DIR/backup_$DATE.sql"
          tar -czf "$BACKUP_DIR/app_backup_$DATE.tar.gz" /opt/{{ app_name }}
          
          # Cleanup old backups (keep 30 days)
          find "$BACKUP_DIR" -name "*.sql" -mtime +30 -delete
          find "$BACKUP_DIR" -name "*.tar.gz" -mtime +30 -delete
        dest: "/usr/local/bin/backup-{{ app_name }}.sh"
        owner: root
        group: root
        mode: '0700'

    - name: Schedule backups securely
      cron:
        name: "Application backup"
        minute: "0"
        hour: "2"
        job: "/usr/local/bin/backup-{{ app_name }}.sh"
        user: root

    - name: Setup file upload directory securely
      file:
        path: "/opt/{{ app_name }}/uploads"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0750'

    - name: Configure SSH settings securely
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin no"
        state: present
        backup: yes

    - name: Disable password authentication in SSH
      lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^#?PasswordAuthentication"
        line: "PasswordAuthentication no"
        state: present
        backup: yes

    - name: Restart SSH service to apply secure settings
      systemd:
        name: ssh
        state: restarted

    - name: Create secure application maintenance script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          # Maintenance script without hardcoded secrets
          /opt/{{ app_name }}/venv/bin/python manage.py cleanup
        dest: "/opt/{{ app_name }}/maintenance.sh"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0700'

    - name: Setup firewall rules securely
      ufw:
        rule: allow
        port: "22"
        proto: tcp

    - name: Open application port
      ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Open secure application port
      ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable UFW securely
      ufw:
        state: enabled
        policy: deny

    - name: Verify application is running
      uri:
        url: "http://localhost:8000/health"
        method: GET
        status_code: 200
        timeout: 30

    - name: Check Redis connectivity securely
      command: redis-cli -a "{{ redis_password }}" ping
      changed_when: false
      no_log: true

    - name: Create secure database connection test script
      copy:
        content: |
          #!/bin/bash
          set -euo pipefail
          export PGPASSWORD="{{ vault_db_password }}"
          psql "$DATABASE_URL" -c "SELECT 1;"
        dest: "/opt/{{ app_name }}/test_db.sh"
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: '0700'

    - name: Run database connection test securely
      command: "/opt/{{ app_name }}/test_db.sh"
      changed_when: false
      become_user: "{{ deploy_user }}"

    - name: Cleanup temporary files securely
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/process_uploads.sh"
        - "/tmp/maintenance.sh"
        - "/tmp/test_db.sh"

    - name: Display secure deployment information
      debug:
        msg: "Application {{ app_name }} deployed successfully"